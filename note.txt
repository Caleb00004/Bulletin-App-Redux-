// NOTE: React toolkit uses Ember.js under the hood

.substring method.
- This is used to get a specific number of letters from a string.

Prepare CallBack
Is used to construct the payload value i.e if the state is an object with multiple parameters (if state is an array of Objects)
you can use prepare callBack to format the data (in the state obj form) gotten from an action so it can be added to the state.

The prepare callBack will be done in the slice file/function.

    How to do This?
 - Add 'reducer in from of the action annonymous function e.g 
 - Then add a prepare function under the 'reducer'. it's parameters will be what data it's recienving from user
        It ill return a payload with the formatted data.

    i.e for a Blog Post state
const state = [ {id: '1', title:'micahel', content: 'This is just to say that a bird is a mouse'} ]//The state object format [ needs an id,title & content property ]

const mySlice = creareSlice....
 
reducers: {
    'action1' : {
        reducer (stat,action) {
            state.push(action)
        },
        prepare(title, content) {  // it wil recenive title and content arguements formthe component that calls the action
            return {
                payload: {   // return the data gotten from action.payload in the state object format
                    id: ''',
                    title,
                    content,
                }
            }
        }
    }
}

format the data 

        Redux Thunk
    createAsyncThunk
// using createAsyncThunk & axios to fetch Api data
// createAsyncThunks takes 2 arguements, 1st -> string for prefix of generated action Tyoe
//    2nd -> is a payload creator callback. this function should return the data fetched


// Sometimes slices reducers may need to respond to other reducers that wer'ent defined as Part of the slices Reducers.
//      You use an extraReducers function. This accepts a builder parameter.
//      builder Parameter is an object that let's us define additional case reducers that run in response to the actions def=ined outside of the slice


    OPTIMIZATION
- Note a useSelector re-runs anytime an action is dipatched.

To prevent this, you can use a 'memoized' useSelector (React.useMemo)
This memoized useSelector can be created in the createslice file and exported to other files

    How?
first have to import createSelector from '@reduxjs/toolkit'
import createSelector in slice file.

use the createSelector in your slice file

the first line should be it's dependencies. It can be in an array.

Another Way to Optimize in Redux. is STATE NORMALICATION
- NORMALIZED STATE. is a way to store data in a redux app.
Normalization means...
- no duplication of data 
- also means keeping item stored in a lookup table by itemID

Normalized State Shape.
* object with an ID's array and a nested entities object that contains all of the items

{
    posts: {
        ids: [1,2,3,...],
        entities: {
            '1': {
                userId: 1,
                id: 1,
                title: ...etc
            }
        }
    }
}